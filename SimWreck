#!/usr/bin/perl

#housekeeping

    use strict;
    use warnings;
    use Data::Dumper;
    use Getopt::Std;
    use Bio::SeqIO; #fasta parser for girls

#USAGE

my $usage =
"
========= SimWreck v1.0 =========

      Ancient DNA Simulator
   Mark Timothy Rabanus-Wallace
 Australian Centre for Ancient DNA 

==================================

SYNOPSIS: SimWreck.pl -i genome.fasta > ancient_reads.fasta
          nohup parallel \'Simwreck.pl -i {} -n1000000 -u4 -l20 -r1.5 -B2.5 -D1E10 -b.25 -d.3 -s.95 -m.1 -N5 > {\.}_wrecked.fasta\' ::: *_genome.fasta &

ARGUMENTS {range} [default]:

-i  Input genome file in fasta format

-n  Number of reads desired { 0,inf } [10,000]

-b  Frequency of single-strand nicks. This parameter represents a combination of time and preservation { >0,inf } [.4]

-d  Frequency of deamination. This parameter represents a combination of time and preservation { >0,inf } [.5]

-s  Frequency of separation. This parameter represents a combination of time and preservation { >0,inf } [.5]

-l  Minimum theoretical length of reads { >0,inf } [15]

-m  \"Hardness\" of minimum length cutoff. As it increases, more reads closer to but above to the threshold length will pass { >0,inf } [.05]

-r  Ratio of p(ss nick occuring 3' of a purine) : p(ss nick occurring 3' of a pyramidine) { >0,inf } [3]

-B  Ratio of Bond Strength (purine) : Bond Strength (pyramidine) { >0,inf } [4]

-D  Ratio of p(deamination | ss) : p(deamination | ds) { >0,inf } <1E9>

-u  Minimum length of ds portion of a fragment for the amplification step to occur { 0,inf } [6]

-N  Maximum number of tandem Ns allowed in a sequence before the sequence is split up and the Ns discarded { >0,inf } [4]

-v  Verbose: Reports each iteration

-V  Debug-mode reporting

-h  Putatively-helpful information

";

#program arguments

    my %opts;
    getopts('i:n:u:l:Vvr:B:D:d:s:m:hN:b:',\%opts);   

    $opts{'h'} && (print STDERR $usage) && exit;

    my $inputfile = $opts{'i'}; #m
        ($inputfile && -r $inputfile) || die $usage;
    my $wantreads = ( $opts{'n'} || 10000); #n give me this many reads
        (($wantreads =~ /^\d*\.?\d*$/) && ($wantreads >= 0)) || die "Desired reads (-n) must be a number greater than zero\n";
    my $mindouble = ($opts{'u'} || 6); #u how much dsDNA does T4 polymerase need to get going?
        (($mindouble =~ /^\d*$/) && ($mindouble >= 0)) || die "Minimum dsDNA length for extension (-u) must be an integer greater than zero\n";
    my $minlength = ($opts{'l'} || 15); #l what length reads will not make it through QC/library prep
        (($minlength =~ /^\d*\.?\d*$/) && ($minlength >= 0)) || die "Minimum final read length  (-l) must be a number greater than zero\n";
    my $V = $opts{'V'}; #v debug-mode verbose to stdout
    my $v = $opts{'v'}; #healthy feedback verbose to stderr
    my $pu_py_breakratio = ($opts{'r'} || 3); #r 
        (($pu_py_breakratio =~ /^\d*\.?\d*$/) && ($pu_py_breakratio >= 0)) || die "Purine:Pyramidine sugar-phosphate backbone nick ratio (-r) must be a number greater than zero\n";
    my $CG_AT_bondratio = ($opts{'B'} || 4); #B 
        (($CG_AT_bondratio =~ /^\d*\.?\d*$/) && ($CG_AT_bondratio >= 0)) || die "C/G:A/T bond strength ratio (-B) must be a number greater than zero\n";
    my $ss_ds_deaminationratio = ($opts{'D'} || 1E9); #D
        (($ss_ds_deaminationratio =~ /^\d*\.?\d*$/) && ($ss_ds_deaminationratio >= 0)) || die "SS:DS deamination probability ratio (-D) must be a number greater than zero\n";
    my $theta_break_param = ($opts{'b'} || .4); #b FIX THIS = WHEN SET TO ZERO IT GOES TO DEFAULT
        (($theta_break_param =~ /^\d*\.?\d*$/) && ($theta_break_param >= 0)) || die "Theta, which affects SS nick frequency (-b), must be a number greater than zero\n";
    my $gamma_damage_param = ($opts{'d'} || .5); #d
        (($gamma_damage_param =~ /^\d*\.?\d*$/) && ($gamma_damage_param >= 0)) || die "Gamma, which affects deamination frequency (-d), must be a number greater than zero\n";
    my $sepprob = ($opts{'s'} || .5); #s #probability of single-nucleotide overlap breaking THIS IS EFFECTIVELY THE RESULT OF MAPDAMAGE'S LAMBDA (and can be converted to lambda with lambda = damageprob/limit(sum_x=1_to_infinity(damageprob^x));
        (($sepprob =~ /^\d*\.?\d*$/) && ($sepprob >= 0)) || die "Alpha, which affects strand separation (-s), must be a number greater than zero\n";
    my $minielute = ($opts{'m'} || .05); #m
        (($minielute =~ /^\d*\.?\d*$/) && ($minielute >= 0)) || die "The small fragment grading parameter (-m) must be a number greater than zero\n";
    my $nN = ($opts{'N'} || 4);
        (($nN =~ /^\d*$/) && ($nN >= 0)) || die "The max length of poly-N stretches (-N) must be an integer greater than zero\n";

    
    
    my %breakprob= #probability of breaking 3' of this nucleotide
        (
        'A' => 1-(exp (-$theta_break_param)),
        'G' => 1-(exp (-$theta_break_param)),
        'C' => (1-(exp (-$theta_break_param)))*(1/$pu_py_breakratio),
        'T' => (1-(exp (-$theta_break_param)))*(1/$pu_py_breakratio),
        );
    
    
    my $damageprob_ss = 1-(exp (-$gamma_damage_param)); #p(deamination) in ssDNA a la mapdamage
    
    
    my %damage_ss= #get the above as hash format for speed
        (
        'G' => '(rand 1 < $damageprob_ss) ? "A" : "G"', #later accessed by an eval statement
        'C' => '(rand 1 < $damageprob_ss) ? "T" : "C"',
        'A' => '"A"',
        'T' => '"T"',
        'N' => '"N"',#even if it deaminates - we'll never know. leave it as an N.
        'R' => '"N"',
        'Y' => '"N"',
        'S' => '"N"',
        'W' => '"N"',
        'K' => '"N"',
        'M' => '"N"',
        'B' => '"N"',
        'S' => '"N"',
        'H' => '"N"',
        'V' => '"N"',
        );
    
    my %damage_ds=
        (
        'G' => '(rand 1 < ($damageprob_ss * (0/$ss_ds_deaminationratio))) ? "A" : "G"',
        'C' => '(rand 1 < ($damageprob_ss * (0/$ss_ds_deaminationratio))) ? "T" : "C"',
        'A' => '"A"',
        'T' => '"T"',
        'N' => '"N"',
        'R' => '"N"',
        'Y' => '"N"',
        'S' => '"N"',
        'W' => '"N"',
        'K' => '"N"',
        'M' => '"N"',
        'B' => '"N"',
        'S' => '"N"',
        'H' => '"N"',
        'V' => '"N"',
        );
        
        
        
        
        
#output factory

    my $seqO_ = Bio::SeqIO->new(-fh => \*STDOUT , -format => 'fasta');



########################################### GUTS ###################################################


    my $nreads = 0;
    my $nits = 0;
        #reset file
        for(;;)
        {
            $v && print STDERR "Reiterating from top of file\n";
            
            my $rawseqI_ = Bio::SeqIO->new(-file => $inputfile , -format => 'fasta');
            
            my @regions;
            while (my $rawseq_ = $rawseqI_->next_seq)
            {
                foreach (split /N{$nN,}/ , $rawseq_->seq)
                {
                    while (my $bit = substr($_,0,1000 + int rand 500,''))
                    {
                        push @regions , $bit;
                    }
                }
                
                
                for( 0 .. (scalar @regions) - 1)
                {
                    (length $regions[$_] < $minlength) && next; #non-N stretch - worth the effort?
                    my $seq_ = Bio::Seq->new(-seq => $regions[$_] , -display_id => $rawseq_->display_id , -format => 'fasta'); # we're there - $seq_ is the sequence object we're going to wreck just now
                    
                    my $seq = $seq_->seq; #sequence itself as a string	
                    my $length = length $seq;
                    my ($pA,$pG,$pC,$pT) = (($seq =~ tr/A//)/$length,($seq =~ tr/G//)/$length,($seq =~ tr/C//)/$length,($seq =~ tr/T//)/$length); #get the frequencies in order to estimate ...
                    
                    $breakprob{'N'} = $breakprob{'A'}*$pA + $breakprob{'G'}*$pG + $breakprob{'C'}*$pC + $breakprob{'T'}*$pT; #= the probability of a randomly-chosen unknown nucleotide breaking. models p(Nucleotide) on the frequency of bases in the rest of the sequence
                    $breakprob{'R'} = $breakprob{'A'}*$pA + $breakprob{'G'}*$pG;
                    $breakprob{'Y'} = $breakprob{'C'}*$pC + $breakprob{'T'}*$pT;
                    $breakprob{'S'} = $breakprob{'G'}*$pG + $breakprob{'C'}*$pC;
                    $breakprob{'W'} = $breakprob{'A'}*$pA + $breakprob{'T'}*$pT;
                    $breakprob{'K'} = $breakprob{'G'}*$pG + $breakprob{'T'}*$pT;
                    $breakprob{'M'} = $breakprob{'A'}*$pA + $breakprob{'C'}*$pC;
                    $breakprob{'B'} = $breakprob{'C'}*$pC + $breakprob{'G'}*$pG+ $breakprob{'T'}*$pT;
                    $breakprob{'S'} = $breakprob{'A'}*$pA + $breakprob{'G'}*$pG + $breakprob{'T'}*$pT;
                    $breakprob{'H'} = $breakprob{'A'}*$pA + $breakprob{'C'}*$pC + $breakprob{'T'}*$pT;
                    $breakprob{'V'} = $breakprob{'A'}*$pA + $breakprob{'C'}*$pC + $breakprob{'G'}*$pG;
                    
                    $v && print STDERR "Next sequence: " , $seq_->display_id , "\n";
                    
                    
                    my @breaks;
                    my $nfrags = 0;
                    my $nrejected = 0;
                    my $nbreaks = 0;
                    my $naccepted = 0;
                    for (0..($length) - 1 ) #scan over sequence, place breaks as records in @breaks 
                    {
                        my $nt = substr($seq,$_,1);
                        
                        $V && print STDERR "- Nucleotide: " , rc($nt) , "\n";
                        $V && print STDERR "p(break|" , rc($nt) , "): " , $breakprob{rc($nt)} , "\n";
                            
                        if (rand 1 < $breakprob{rc($nt)}) #break F (+) strand '5 of nt? (breakpoints given so substr index will be correct later with no fuckery) THAT'S WHAT I THOUGHT!
                        {
                            ++$nbreaks;
                            $V && print STDERR "###################### It breaks 5' of the + nucleotide (on the - strand)!\n";
                            push @breaks , [ $_ , '-' ];
                        }                        
                        
                        $V && print STDERR "+ Nucleotide: $nt\n";
                        $V && print STDERR "p(break|$nt): $breakprob{$nt}\n";
                            
                        if (rand 1 < $breakprob{$nt}) #break R (-) strand 3' of nt?
                        {
                            $v && ((++$nbreaks % 100000) || print STDERR "\t$nbreaks single-strand breaks generated\n");
                            $V && print STDERR "###################### It breaks 3' of the + nucleotide! (on the + strand)\n";
                            push @breaks , [ $_+1 , '+' ]; #break record. arrayref with position and strand
                        }
                    }
                    
                    $V && print STDERR "BREAKS: \n" , Dumper (@breaks) , "\n";
                    
                    #time to interpret the results of these nicks - do the strands separate?
                    my $sepflag = 0;
                    for (my($i,$j) = (0,1) ; $j < scalar @breaks ; ++$i,++$j ) #this is also clever. increment separately to access each adjacent nicks pair going 5' to 3'.
                    {
                        $V && print STDERR "Examining breaks\n";
                        $V && print STDERR "\nbreak pair: $i/$j, position: $breaks[$i][0], strand $breaks[$i][1] / position: $breaks[$j][0] , strand: $breaks[$j][1]\n";
                        $V && print STDERR "Overlap:" , substr($seq,$breaks[$i][0],$breaks[$j][0]-$breaks[$i][0]) , "\n";
                        $V && print STDERR "Overlap length: " , ($breaks[$j][0]-$breaks[$i][0]) , "\n";
                        $V && print STDERR "p(sep): " , exp(-$sepprob*($breaks[$j][0]-$breaks[$i][0])) , "\ntrying for a break...\n";
                        #$V && print STDERR "Cs+Gs: " ,$end =~ tr/CG// , "\n";
                        #$V && print STDERR "p(sep as f(GC)):" , exp(-$sepprob*(($end=~tr/CG//)+(($breaks[$j][0]-$breaks[$i][0])-($end=~tr/CG//))*(1/$CG_AT_bondratio))) , "\n" ;
                        
                        my $end = substr($seq,$breaks[$i][0],$breaks[$j][0]-$breaks[$i][0]);
                        if (($breaks[$i][1] ne $breaks[$j][1]) && (rand 1 < exp(-$sepprob*(($end=~tr/CG//)+(($breaks[$j][0]-$breaks[$i][0])-($end=~tr/CG//))*(1/$CG_AT_bondratio))))) #it will break if the nicks are on different strands, and luck is favourable. luck is related to overlap length.
                        {
                            $v && ((++$nfrags % 400) || print STDERR "\t\t$nfrags fragments tested. $naccepted accepted\n");
                            $V && print STDERR "It separates\n";
                            
                            if ($sepflag) #we're downstream of a separation already, so there is a new fragment to damage
                            {
                                $V && print STDERR "separation!\n";
                                $V && print STDERR "Previous separation detected, entering damage and store routine.\n\n";
                                
                                my $damagedseq = damage($seq,$sepflag,\@breaks,$i,$j); #what's the damage?
                                if (($damagedseq) && not ((rand 1) <= (exp(-$minielute*((length $damagedseq) - $minlength))))) #DO THIS TEST BEFORE DAMAGE/STORE ROUTINE
                                {
                                    ++$naccepted;
                                    $V && print STDERR "Final Sequence: $damagedseq\n";
                                    
                                    my $seqout_ = Bio::Seq->new(-display_id => $seq_->display_id."_SimWreck_".($nreads+1) , -seq => $damagedseq); #write this to STDOUT as a fasta
                                    $seqO_->write_seq($seqout_);
                                    ++$nreads >= $wantreads && ($nits > 5 || print "WARNING: Low iterations \($nits\). Consider generating more reads to avoid biases.") && (print STDERR "Program completed. Please collect your DNA in an orderly fashion.\n") && exit 1; #we've reached out target, groovy.
                                    ($nreads % 1000) && print STDERR $nreads*100/$wantreads , "% complete.\n";
                                }
                                else
                                {
                                    ++$nrejected; $V && print STDERR "This sequence is either non-existent or too short:\n" ; $V &&  $damagedseq && print STDERR "$damagedseq\n"
                                }
                            }
                            
                            $sepflag = [ $breaks[$i] , $breaks[$j] ];
                            $V && print STDERR "Left possible break set to " , Dumper ( $breaks[$i] , $breaks[$j] ) , "\n";
                            
                        }
                    } $v && print STDERR "This sequence: $nbreaks breaks\n\t" . scalar @breaks , " single-stranded nicks occurred\n\t$nfrags fragments separated.\n\t$nreads passed length filter (failure rate " , ($nrejected/$nfrags)*100 , "%)\n";     #fix failure rate
                } 
            } $nreads == 0 && print STDERR "No reads generated this iteration: If this error message persists check arguments are reasonable and retry with increased theta and p(sep) using the -b and -s flags\n"; 
            ++$nits;
        }
        
    

    
    
    sub damage ######################################## LOWER GUT ########################################################
    {
    my $seq = shift;
    my $sepflag = shift;
    my @breaks = @{shift;};
    my ($i,$j) = @_;
    
    #for ease of reading (sorry mum)... extract coordinates and identities of strands
    my $l_most_pos = $sepflag->[0][0];
    my $l_most_strand = $sepflag->[0][1];
    my $l_middle_pos = $sepflag->[1][0];
    my $l_middle_strand = $sepflag->[1][1];
    my $r_middle_pos = $breaks[$i][0];
    my $r_middle_strand = $breaks[$i][1];
    my $r_most_pos = $breaks[$j][0];
    my $r_most_strand = $breaks[$j][1];
    
    $V && print STDERR "Breakpair: $l_most_pos : $l_most_strand : $l_middle_pos : $l_middle_strand : $r_middle_pos : $r_middle_strand : $r_most_pos : $r_most_strand\n"; #VERY USEFUL
    
    #the left (5') single-stranded overhang (these sections may have length zero (i.e. blunt end or single strand))
    my $l_ss = substr ($seq , $l_most_pos , $l_middle_pos - $l_most_pos );
    #the double-stranded part
    my $ds = substr ($seq , $l_middle_pos , $r_middle_pos - $l_middle_pos);
    #the right (3') single-stranded overhang
    my $r_ss = substr ($seq , $r_middle_pos , $r_most_pos-$r_middle_pos);
    
    #check the DS section does not rule out repair/ligation
    if ((length $ds) < $mindouble)
    {
        $V && print STDERR "DS section too short!\n";
        return
    };
    
    my $seqbuild; #a bin for the final seq. now we're going to go left to right over the ss, ds, and ss sections (if they exist) and damage them according to the appropriate hash;
    
    #assess the 5' end. 3' (- strand) overhang? Cut it off. 5' (+ strand) overhang? Damage it G -> A;
    unless ($l_most_strand eq '-') # unless it looks like this __====?  or ====? (3' overhang to cut off (i.e. ignore))
    {
        for my $nt (split '' , $l_ss) #damage a left (3') overhang
        {
        $V && print STDERR "$nt to ";
            if ($nt eq 'G') {$seqbuild .= 'G'} else {$seqbuild .= eval $damage_ss{$nt}};
        $V && print STDERR (substr ($seqbuild , -1 , 1) , "\n");
        }       
    } #else implied that 3' overhang is cut off by T4 Polymerase
$V && $seqbuild && print STDERR "Left_SS done: Seqbuild: $seqbuild\n";
    
        foreach my $nt (split '' , $ds) #damage a double-stranded section
        {
        $V && print STDERR "$nt to ";
            $seqbuild .= eval $damage_ds{$nt};
        $V && print STDERR (substr ($seqbuild , -1 , 1) , "\n");
        }
$V && $seqbuild && print STDERR "DS done: Seqbuild: $seqbuild\n";
        
        
    #assess the 3' end. 3' (+ strand) overhang? Cut it off. 5' (- strand) overhang? Damage it C->T;
    unless ($r_middle_strand  eq '-') #unless it looks like this ?====--- or ?==== (3' overhang to off (i.e. ignore))
    {
        foreach my $nt (split '' , $r_ss) #damage a right (5') overhang
        {
        $V && print STDERR "$nt to ";
            if ($nt eq 'C') {$seqbuild .= 'C'} else {$seqbuild .= eval $damage_ss{$nt}};
        $V && print STDERR (substr ($seqbuild , -1 , 1) , "\n");
        }
$V && $seqbuild && print STDERR "r_SS done: Seqbuild: $seqbuild\n";
    }
    
        #rand 1 < .5 ? $seqbuild : rc ($seqbuild); #50/50 as to whether you sequence the + or - strand...
        $seqbuild;
    }
    
    sub rc ########################################################################################################
    {
       my $seq = $_[0];
       $seq =~ tr/ACGTNRYSWKMBDHV/TGCANYRSWMKVHDB/;
       return join '' , reverse ( split '' , $seq);
    }
