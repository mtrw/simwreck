#!/usr/bin/perl

    use strict;
    use warnings;
    use Data::Dumper;
    use Getopt::Std;
    use Bio::SeqIO;



#USAGE
my $usage =
"
********** SimWreck **********
             V1.0
 Mark Timothy Rabanus-Wallace
 *****************************
______________________________

An aDNA read simulator for testing analysis pipelines.
Give it a genome and describe to it what condition the reads will be in.
Face the STDOUT and prepare to catch your sequences.
______________________________


SYNOPSIS:	GenWreck -i genome.fasta
		Genwreck -X -i Sanger_seq.fasta #implement DAMAGE ONLY MODE#################################################################################################################
		GenWreck -i genome.fasta -n 10000 -s 2 -S 8 -m 100 -M 450 -p 2.2 -d .8 -D .2
		#with GNU parallel
		parallel 'echo {/.}; GenWreck {} > out_data/{/.}_simanc.fa ; echo ;' ::: data/*
		
ARGUMENTS:	[interval] (default)	Desription
    
    General
    
    -i 					Genome file to make reads from, in fasta format.
    -n		[1,+inf) (10000)	Number of reads desired.
    -r 		[0,1] (.5)		Proportion of minus strand reads.
    -X					Damage-only mode. Returns each input sequence whole, with damage added as per any damage parameters specified.

    Size distribution
    
    -s 		(0,+inf) (4)		Shape parameter (alpha).
    -S 		(0,+inf) (4)		Scale parameter (beta).
    -m 		[0,+inf) (80)		Nucleotide length at left end of beta distribution.
    -M 		(0,+inf) (280)		Nucleotide length at right end of beta distribution.
    
    Damage
    
    -p 		[0,+inf) (3)		Depurination weight parameter. Ratio of nicks that occur 3' of a purine:3' of a pyrimidine. (e.g. at 2, it is twice as likely that a strand will begin or end with a purine).
    -d 		[0,+inf) (.3)		Deamination weight parameter, influencing how frequently deamination results in pseudomutations.
    -D 		[0,+inf) (.5)		Deamination decay parameter, influencing how the rate of deamination decays further from the ends of the sequence.
    -b 		[0,-d] (.01)		Baseline rate of deamination.

";


! $ARGV[0] && (print STDERR $usage) && exit;

#vars, params, args
    
    my $illegalflag = 1;
    my $shortflag = 1;
    my $paramchangeflag = 0;
    my %opts;
    
    getopts('PVXhi:n:s:S:m:M:p:d:D:r:b:u:a:',\%opts);   
    
    ($opts{'h'} && print STDERR $usage) && exit;
        
    my $ntot;
    my $shape;
    my $scale;
    my $minlength;
    my $maxlength;
    my $nPu_vs_nPy;
    my $damweight;
    my $damdecay;
    my $dammode;
    my $baseline;
    my $frprop;
    my $V;
    my $VV = 0; #sneaky report var for working on this
    my $up;
    my $across;

    if ($opts{'n'}) { $ntot = $opts{'n'}} else {$ntot = 10000; $paramchangeflag = 1 } ; #n reads desired
        (($ntot =~ /^\d*\.?\d*$/) && ($ntot > 0)) || die "\nERROR: Desired reads (-n) must be a number greater than 0\n";
    if ($opts{'s'}) { $shape = $opts{'s'}} else {$shape = 4; $paramchangeflag = 1 } ; #shape param
        (($shape =~ /^\d*\.?\d*$/) && ($shape > 0)) || die "\nERROR: Shape parameter (-s) must be a number greater than 0\n";
    if ($opts{'S'}) { $scale = $opts{'S'}} else {$scale = 4; $paramchangeflag = 1 } ; #scale param
        (($scale =~ /^\d*\.?\d*$/) && ($scale > 0)) || die "\nERROR: Scale parameter (-S) must be a number greater than 0\n";
    if ($opts{'m'}) { $minlength = $opts{'m'}} else {$minlength = 80; $paramchangeflag = 1 } ; #Left end of beta distribution parameter
        (($minlength =~ /^\d*\.?\d*$/) && ($minlength >= 0)) || die "\nERROR: Left end of beta distribution parameter (-m) must be a number greater than or equal to 0\n";
    if ($opts{'M'}) { $maxlength = $opts{'M'}} else {$maxlength = 280; $paramchangeflag = 1 } ; #Right end of beta distribution parameter
        (($maxlength =~ /^\d*\.?\d*$/) && ($maxlength > $minlength)) || die "\nERROR: Right end of beta distribution parameter (-M) must be a number greater than 0 and greater than left end (-m)\n";
    if ($opts{'u'}) { $up = $opts{'u'}} else {$up = 20} ; #height of the ascii density plot in chars
        (($up =~ /^\d*\.?\d*$/) && ($up > 5)) || die "\nERROR: Plot height (-u) must be a number greater than 4\n";
    if ($opts{'a'}) { $across = $opts{'a'}} else {$across = 50} ; #width of the ascii density plot in chars
        (($across =~ /^\d*\.?\d*$/) && ($across > 5)) || die "\nERROR: Plot width (-u) must be a number greater than 4\n";
    if ($opts{'P'})
    {
	plot_beta($shape,$scale,$minlength,$maxlength,$across,$up);
	exit;
    }
    ((my $infile = $opts{'i'}) && (-e $opts{'i'}) ) || (die "\nCheck input fasta file given with -i.\n"); #input file
    if ($opts{'V'}) { $V = 1 ; $V = 1 }
    if ($opts{'p'}) { $nPu_vs_nPy = $opts{'p'}} else {$nPu_vs_nPy = 3; $paramchangeflag = 1 } ;  #purine/pyramidine break ratio. e.g. 2 means twice so likely to break at a purine
        (($nPu_vs_nPy =~ /^\d*\.?\d*$/) && ($nPu_vs_nPy >= 0 )) || die "\nERROR: Purine:Pyrimide break ratio parameter (-p) must be a number greater than 0\n";
    if (defined $opts{'d'}) { $damweight = $opts{'d'}} else {$damweight = .3; $paramchangeflag = 1 } ;  #damage weight. probability of end nucleotide being deaminated
        (($damweight =~ /^\d*\.?\d*$/) && ($damweight >= 0 ) && ($damweight <= 1 )) || die "\nERROR: Damage weight parameter (-d) must be a number from 0 to 1\n";
    if ($opts{'D'}) { $damdecay = $opts{'D'}} else {$damdecay = .5; $paramchangeflag = 1 } ;  #damage weight. pribability of end nucleotide being deaminated
        (($damdecay =~ /^\d*\.?\d*$/) && ($damdecay >= 0 )) || die "\nERROR: Damage weight parameter (-d) must be a number from 0 to one\n";
    if ($opts{'X'}) { $dammode = 1} else {$dammode = 0; $paramchangeflag = 1 } ;  #are we in damage-only mode?
    if ($opts{'r'}) { $frprop = $opts{'r'}} else {$frprop = .5; $paramchangeflag = 1 } ;  #forward/reverse (standard/reverse complement) ratio. accounts for disequilibrium between deamination patterns when strands are significantly different so that amplification bias occurs
 	(($frprop =~ /^\d*\.?\d*$/) && ($frprop >= 0) && ($frprop <= 1)) || die "\nERROR: Plus/Minus parameter (-r) must be a number from 0 to one\n";
    if ($opts{'b'}) { $baseline = $opts{'b'}} else {$baseline = .01; $paramchangeflag = 1 } ;  #forward/reverse (standard/reverse complement) ratio. accounts for disequilibrium between deamination patterns when strands are significantly different so that amplification bias occurs
 	(($baseline =~ /^\d*\.?\d*$/) && ($baseline >= 0) && ($baseline <= $damweight)) || die "\nERROR: Deamination baseline parameter must be from 0 and the damage weight ($damweight).\n";
	
    print STDERR "\nBeginning SimWreck with these parameters:\nInput file: $infile\nShape: $shape\n# reads: $ntot\nScale: $scale\nMin: $minlength\nMax: $maxlength\nBreakratio: $nPu_vs_nPy\nDamage weight: $damweight\nDamage decay: $damdecay\nDamage baseline: $baseline\nProportion plus strand: $frprop\n";
    ($dammode) ? print STDERR "Mode: damage-only\n\n" : print STDERR "Mode: Standard\n\n" ;
    $paramchangeflag && print STDERR "WARNING: Parameters altered or set automatically to default values\n";
    
    #output factory
    
    my $seqO_ = Bio::SeqIO->new(-fh => \*STDOUT , -format => 'fasta');
    my $seqI_ = Bio::SeqIO->new(-file => $infile , -format => 'fasta');
    
    ($ntot < 1000) && print STDERR "WARNING: Low number of sequences from $infile requested: expect rounding errors in number returned.\n";
    (($maxlength - $minlength) < 20) && print STDERR "WARNING: Small size range for fragments may lead to excessive 0-length fragments or generally odd results. Consider altering -m and -M.\n";

########################################### GUTS ###################################################
    


    $V && print STDERR "First pass for numbers\' sake\n";
    my $totlength = 0;
    my $smallestlength;
    while (my $seq_ = $seqI_->next_seq)
    {
	$dammode && ($seqO_->write_seq(Bio::Seq->new(-seq => damage($seq_->seq) , -display_id => $seq_->display_id."_SimWreck"))) && next;
	$V && print STDERR "Length of " , $seq_->display_id , ": " , $seq_->length , "\n";
	$totlength += $seq_->length;
	if (! defined $smallestlength || $seq_->length < $smallestlength)
	{
	    $smallestlength = $seq_->length;
	    $V && print STDERR "Smallest length: $smallestlength\n";
	}
	
    }
    $dammode && (print "Program Completed\n") && exit;
    #exit;
    
    $V && print STDERR "Totlength: $totlength\n";
    $V && print STDERR "Smallest length FINAL: $smallestlength\n";
    
    ($maxlength > $smallestlength) && print STDERR "WARNING: Some contigs shorter than largest expected reads: expect possible excessive mostly-N reads from these contigs\n";
    
    
    $seqI_ = Bio::SeqIO->new(-file => $infile , -format => 'fasta'); #reload file for second pass
	
    while (my $seq_ = $seqI_->next_seq)
    {
	my $nreads = 0; #counter
	
	for ( [ nint((($seq_->length)/$totlength) * $ntot*$frprop) , $seq_->seq ] , [ nint((($seq_->length)/$totlength) * $ntot*(1-$frprop)) , rc($seq_->seq) ] )
	{
	    my ($n,$seq) = @$_;
	    
	    $V && print STDERR "This runthrough:\nSeq is $seq\nI want in total " , nint((($seq_->length)/$totlength) * $ntot), " reads from this seq (or its rc), so ... \nthis round I\'m producing $n reads\n\n"; 
	    
	    $V && print STDERR '###' x 50 , "\nNEW SEQUENCE: " , $seq_->display_id , " \nLocal n is $n\n";
	    
	    #my $seq = $seq_->seq;
	    for (1..$maxlength)
	    {
		$seq .= 'N';
	    }
	    my $seqlength = length $seq;
	    if (($seqlength < 1000) && ($shortflag))
	    {
		print STDERR "WARNING: Short contig(s) detected: expect rounding errors in number of reads returned.\n";
		$shortflag = 0;
	    }
	    $V && print STDERR "Seq is: " , $seq_->seq , "\n\n";
	    if (($seq =~ s/(?![AGCTagct])/N/) && ($illegalflag))
	    {
		print STDERR "WARNING: Non-AGTC nucleotides in at least one sequence changed to Ns.\n";
		$illegalflag = 0;
	    }
	    my $nPu = $seq =~ tr/[AaGg]//;
	    my $nPy = $seqlength - $seq =~ tr/[Nn]// - $nPu;
	    
	    $V && print STDERR "Seq length: $seqlength\n";
	    $V && print STDERR "Purines: $nPu\nPyramidines: $nPy\n";
	    
	    my $nPu_breaks = nint((($nPu_vs_nPy*($nPu/$nPy))*$n)/(1+($nPu_vs_nPy*($nPu/$nPy))));
	    my $nPy_breaks = $n - $nPu_breaks;
	    
	    $V && print STDERR "Purine breaks: $nPu_breaks\nPyramidine breaks: $nPy_breaks\n";
	    
	    my @starts_pu;
	    my @starts_py;
	    for (1..$nPu_breaks)
	    {
		push @starts_pu , int(rand ($nPu))
	    }
	    for (1..$nPy_breaks)
	    {
		push @starts_py , int(rand ($nPy))
	    }
	    @starts_py = sort {$a <=> $b} @starts_py; @starts_pu = sort {$a <=> $b} @starts_pu;
	    
	    $V && print STDERR "Breaks pu:\n\t" , join ("\n\t" , @starts_pu) , "\nBreaks py:\n\t" , join ("\n\t" , @starts_py) , "\n";
	    
	    my $pucount = -1;
	    my $pycount = -1;
	    my @seqarray = split '' , $seq;
	    for ( my $i = 0 ; $i <= $seqlength-$maxlength ; ++$i )
	    {
		$V && print STDERR "i: $i\n";
		$V && print STDERR "nt is $seqarray[$i]\n";
		if ($seqarray[$i] =~ /[AaGg]/)
		{
		    ++$pucount;
		    $V && print STDERR "That's the $pucount"."th purine\n";
		    if ( (defined $starts_pu[0]) && ($pucount == $starts_pu[0]))
		    {
			$V && $starts_pu[0] && $starts_pu[1] && print STDERR "\t ... and it's a startpoint. Next is at $starts_pu[1].\n";
			
			$V && print STDERR "Guaranteed inclusion: " , @seqarray[($i+1) .. ($i+$minlength)] , "\n";
			my $length = get_length($nPu_vs_nPy , $shape , $scale , $minlength , $maxlength , $V , @seqarray[($i+1+$minlength) .. ($i+1+$maxlength)]);
			$V && print STDERR "Length: $length\n";
			++$nreads;
			my $id;
			($seq_->display_id) ? ($id = $seq_->display_id) : ($id = 'NO_ID');
			$V && print "Into Damage: " , join ('',@seqarray[($i+1)..($i+1+$length)]) , "\n";
			my $frag_ = Bio::Seq->new(-seq => damage(join('',@seqarray[($i+1)..($i+$length)]),$damweight,$damdecay,$baseline,$V) , -display_id => $id."_SimAnc_".$nreads);
			$seqO_->write_seq($frag_);
			$V && print STDERR "Reads so far: $nreads\n";
			if ((defined $starts_pu[1]) && ($starts_pu[0] == $starts_pu[1]))
			{
			    --$pucount;
			    --$i;
			    $V && print STDERR "There's a doubleup. Reducing pucount to $pucount and i to $i\n";
			}
			shift @starts_pu;
		    }
		}
		elsif ($seqarray[$i] =~ /[TtCc]/)
		{
		    ++$pycount;
		    $V && print STDERR "That's the $pycount"."th pyrimidine\n";
		    if ((defined $starts_py[0]) && ($pycount == $starts_py[0]))
		    {
			$V && $starts_py[0]  && $starts_py[1] && print STDERR "\t ... and it's a startpoint. Next is at $starts_py[1].\n";
			
			$V && print STDERR "Guaranteed inclusion: " , @seqarray[($i+1) .. ($i+$minlength)] , "\n";
			my $length = get_length($nPu_vs_nPy , $shape , $scale , $minlength , $maxlength , $V , @seqarray[($i+1+$minlength) .. ($i+1+$maxlength)]);
			$V && print STDERR "Length: $length\n";
			++$nreads;
			my $id;
			($seq_->display_id) ? ($id = $seq_->display_id) : ($id = 'NO_ID');
			$V && print "Into Damage: " , join ('',@seqarray[($i+1)..($i+1+$length)]) , "\n";
			my $frag_ = Bio::Seq->new(-seq => damage(join('',@seqarray[($i+1)..($i+$length)]),$damweight,$damdecay,$baseline,$V) , -display_id => $id."_SimAnc_".$nreads);
			$seqO_->write_seq($frag_);
			$V && print STDERR "Reads so far: $nreads\n";
			if ((defined $starts_py[1]) && ($starts_py[0] == $starts_py[1]))
			{
			    --$pycount;
			    --$i;
			    $V && print STDERR "REDUCING pycount TO $pycount and i to $i\n";
			}
			shift @starts_py;
		    }
		}
	    }
	}
    }
    
    print STDERR "Program completed\n";
    
    exit;
    
    
    

    
    
    
    ###########################################################################################################################################################################################################################################################################################
    ############################################################################################################################################################################		SUBS		###############################################################################
    ###########################################################################################################################################################################################################################################################################################
    
    
    sub get_length #####################################################################################################################################################################################################################################################################
    {

	my @scores;
	my $totscore;
	my $nPu_vs_nPy = shift;
	my $shape = shift;
	my $scale = shift;
	my $minlength = shift;
	my $maxlength = shift;
	my $V = shift;
	my $i = 0;
	
	$V && print STDERR "Building prob dist for the region in which a break may occur: @_\n";
	
	foreach (@_)
	{
	    my $s = 0;
	    $V && print STDERR "Currently exploring the $i" . "th possible break position; considering this: $_\n";
	    if (($_) && ($_ =~ /[AaGg]/))
	    {
		$V && print STDERR "It's a purine ($_), $i from the top, so we'll get the distribution score at x= ",((2*$i)+1), " on " ,(2*(scalar @_))  ," = " , ((2*$i)+1)/(2*(scalar @_)) , ", distribution contribution of " , beta_pdf(((2*$i)+1)/(2*(scalar @_)) , $shape , $scale) , " and a nucleotide scale factor of 1 (since we are downstream of a PYRIMIDINE, but it's on the other strand).\n";
		$s = beta_pdf(((2*$i)+1)/(2*(scalar @_)) , $shape , $scale );
		$V && print STDERR "Our unnormalised probability score is therefore $s\n";
	    }
        else
	    {
		    $V && print STDERR "It's a pyrimidine (or unknown) ($_), $i from the top, so we'll get the distribution score at x= ",((2*$i)+1), " on " ,(2*(scalar @_))  ," = " , ((2*$i)+1)/(2*(scalar @_)) , ", distribution contribution of " , beta_pdf(((2*$i)+1)/(2*(scalar @_)) , $shape , $scale) , " and a nucleotide scale factor of " , $nPu_vs_nPy , "\n";
		    $s = $nPu_vs_nPy*beta_pdf(((2*$i)+1)/(2*(scalar @_)) , $shape , $scale );
		    $V && print STDERR "Our unnormalised probability score is therefore $s\n";
	    }
	    
	    push @scores , $s;
	    $totscore += $s;
	    $V && print "Score so far: $totscore\n";
	    ++$i
	}
	
	my $decider = rand($totscore);
	$V && print STDERR "We\'re out of that loop, second pass now with total score $totscore and decider $decider\n";
	$V && print STDERR "Scores:\n" , join ("\n" , @scores) , "\n";
	my $cumscore = 0;
	for ( my $i = 0 ; $i < scalar @scores ; ++$i )
	{
	    $cumscore += $scores[$i];
	    $V && print STDERR "Cumulative score so far: $cumscore\nWould-be breakpoint is at " , $minlength+$i , ", (or $i beyond minlength)\n" ;
	    if ($decider <= $cumscore)
	    {
		$V && print STDERR "Giving back your fragment\'s length: " , $minlength+$i , "\n";
		return $minlength+$i;
	    }
	}
    }
    
    sub damage ############################################################################################################################################################################################################################################################################################
    {
	my $seqbuild;	
	my ($seq,$damweight,$damdecay,$baseline,$V) = @_;
	#print STDERR "Type is: $type\n";
	
	for ( my $i = 0 ; $i < length ($seq) ; ++$i )
	{
	    $V && print STDERR "DAMAGE: Dist from top: $i ; Dist from end: " , (length ($seq) - $i) , "\n";
	    $V && print STDERR "Nt is " , substr($seq,$i,1) , ". Value to beat (5' to 3') is " , (($damweight-$baseline)*exp(-(((length ($seq) - $i - 1))*$damdecay))) + $baseline , "\n";
	    if ((substr($seq,$i,1) eq 'C') && (rand 1 < ((($damweight-$baseline)*exp(-(($i)*$damdecay)))+$baseline)))
	    {
		$V && print STDERR "C -> T\n";
		$seqbuild .= 'T';
	    }
	    elsif ((substr($seq,$i,1) eq 'G') && (rand 1 < (($damweight-$baseline)*exp(-(((length ($seq) - $i - 1))*$damdecay))+$baseline)))
	    {
		$V && print STDERR "G -> A\n";
		$seqbuild .= 'A';
	    }
	    else
	    {
		$seqbuild .= substr($seq,$i,1);
	    }
	    $V && print STDERR "Seqbuild: $seqbuild\n"
	}
	$seqbuild;
    }



    sub beta_pdf #################################################################################################################################################################################################################################################################################
    {
	(($_[0]**($_[1]-1))*(1-$_[0])**($_[2]-1))#/beta($_[1],$_[2]);
    }
    
    sub nint ##################################################################################################################################################################################################################################################################################
    {
	(($_[0] - int($_[0])) >= 0.5) ? return int($_[0]) + 1 : return int($_[0])
    }
    
    sub rc ##################################################################################################################################################################################################################################################################################
    {
       my $seq = $_[0];
       $V = $_[1];
       $V && print STDERR "Returning rc from rc subroutine\n";
       $seq =~ tr/ACGTNRYSWKMBDHV/TGCANYRSWMKVHDB/;
       return join '' , reverse ( split '' , $seq);
    }
    
sub plot_beta
{
    my $v = 1;
    my ($shape , $scale , $minlength , $maxlength , $displen_h , $displen_v) = @_;

    my @cols;
    my @betas;
    for ( 1 .. $displen_h )
    {
	#print "Beta: " , beta_pdf(((2*$_)+1)/(2*$displen_h) , $shape , $scale ) , "\n";
	push @betas , beta_pdf(((2*$_)+1)/(2*$displen_h) , $shape , $scale ); # get the right beta function
    }
    my $max = max(@betas);
    @betas = map {($_/$max)*$displen_v} @betas;
    
    #print "@betas\n";
    for ( 0 .. $displen_h -1 )
    {
	my $height = nint($betas[$_]);
	($height =~ /^\d+$/) || ($height = 0);
	#print "Height: $height\n";
	my @thiscol = ('#') x $height;
	@thiscol = (@thiscol, (' ') x ($displen_v - $height) );
	push @cols , [@thiscol];
    }
    #print Dumper @cols;

    for my $row (reverse(0 .. scalar @{$cols[0]}-1))
    {
	print map {@$_[$row]} @cols;
	print "\n";
    }

    my $midlength = ($maxlength - $minlength)/2 + $minlength;
    my $gaps = (scalar @cols) - (length $maxlength) - (length $minlength) - (length $midlength);
    my $gap1 = nint ($gaps/2);
    my $gap2 = $gaps-$gap1;

    print '-' x scalar @cols;
    print "\n$minlength" , ' ' x $gap1 , "$midlength" , ' ' x $gap2 , "$maxlength\n";
}

sub max #################################################################################################################################################################################################################################################################################
{
    my $best = shift;
    foreach (@_)
    {
	($_ > $best) && ($best = $_)
    }
    $best;
}
